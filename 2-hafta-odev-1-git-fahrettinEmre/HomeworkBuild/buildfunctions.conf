#Kullanıcaya hata mesajlarını kırmızı renkte vermek için oluşturuldu.
write_warning(){
    input1=$1
    echo -e "\033[31m${input1}\033[0m"
}

#Kullanıcıya bilgi mesajlarını sarı renkte vermek için oluşturuldu.
write_info(){
    input1=$1
    echo -e "\033[33m${input1}\033[0m"
}

#Build işlemini yapmaktadır .Ayrıca fonsiyon içerisinde içerisinde zip/tar kontrolü ve istenen path alınmaktadır.
start_build(){
   
    echo "sıkıstırma türünü seciniz. tar/zip"
    read compress_type
    check_compress_type "$compress_type"
    get_location_archive_file "$compress_type"
   
    exit 0
}

#Kullanıcıdan path girmesini ister ve girilen path'e archive dosyasını taşır.
get_location_archive_file(){
    type=$1
    echo "Taşımak istediğiniz full path'i giriniz exp:/home/../Desktop"
    read location
    mv $GLOBAL_BRACH.$type $location >>/dev/null
    rm build.file
}

#Tar veya zip olup olmadığı check edilir ve ona göre compress almaya yarar.
check_compress_type(){
    type=$1

    echo $type

    if [ $type = "tar" ] ; then

    echo "sıkıstırma tar olarak baslıyacak"
    write_info "build işlemi başladı ve bitti"
    go build -o build.file
    tar -czf ./$GLOBAL_BRACH.$type ./build.file

    elif [ $type = "zip" ] ; then

    echo "sıkıstırma zip olarak baslayacak "
    write_info "build işlemi başladı ve bitti zip olacak"
    go build -o build.file
    zip $GLOBAL_BRACH.$type ./build.file    
  
    else
    write_warning " tar veya zip uzantısı desteklenmektedir. "
     exit 1

    fi
    
}

#Branch kontrolü yapmaya yarar.
check_main_branch(){
    branch_name=$1
    if [ "$branch_name" = "master" ] || [ "$branch_name" = "main" ] ; then
    write_warning "master veya main branchini build edeceksiniz ! y/n"
    read check
    if [ "$check" = "y" ] ; then
    start_build
    else
    write_info "Build işlemi başlamadı !"
    exit 1
    fi
    fi
}